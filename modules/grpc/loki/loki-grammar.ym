/*
 * Copyright (c) 2023 László Várady
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "loki-parser.h"

}


%code {

#include "cfg-grammar-internal.h"
#include "plugin.h"
#include "syslog-names.h"

#include "loki-dest.h"
#include "grpc-dest.h"

#include <stdlib.h>

GrpcClientCredentialsBuilderW *last_grpc_client_credentials_builder;

}

%define api.prefix {loki_}

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_LOKI
%token KW_URL
%token KW_LABELS
%token KW_TIMESTAMP

%token KW_AUTH
%token KW_INSECURE
%token KW_TLS
%token KW_KEY_FILE
%token KW_CERT_FILE
%token KW_CA_FILE
%token KW_ALTS
%token KW_TARGET_SERVICE_ACCOUNTS
%token KW_ADC
%token KW_TENANT_ID

%token KW_KEEP_ALIVE
%token KW_TIME
%token KW_TIMEOUT
%token KW_MAX_PINGS_WITHOUT_DATA

%token KW_CHANNEL_ARGS
%token KW_HEADERS

%token KW_BATCH_BYTES

%type <ptr> loki_dest

%%

start
  : LL_CONTEXT_DESTINATION loki_dest { YYACCEPT; }
  ;

loki_dest
  : KW_LOKI
    {
      last_driver = *instance = loki_dd_new(configuration);
    }
    '(' _inner_dest_context_push loki_dest_options _inner_dest_context_pop ')' { $$ = last_driver; }
  ;

loki_dest_options
  : loki_dest_option loki_dest_options
  |
  ;

loki_dest_option
  : KW_URL '(' string ')' { grpc_dd_set_url(last_driver, $3); free($3); }
  | KW_KEEP_ALIVE '(' loki_keepalive_options ')'
  | KW_LABELS '(' loki_labels ')'
  | KW_TENANT_ID '(' string ')' { loki_dd_set_tenant_id(last_driver, $3); free($3); }
  | KW_TIMESTAMP '(' string ')'
    {
      CHECK_ERROR(loki_dd_set_timestamp(last_driver, $3), @1, "Failed to set timestamp(). Valid values are: \"current\", \"received\", \"msg\"");
      free($3);
    }
  | KW_TEMPLATE '(' template_name_or_content ')' { loki_dd_set_message_template_ref(last_driver, $3); }
  | KW_BATCH_BYTES '(' positive_integer ')'
    {
      grpc_dd_set_batch_bytes(last_driver, $3);
    }
  | KW_AUTH { last_grpc_client_credentials_builder = grpc_dd_get_credentials_builder(last_driver); } '(' grpc_client_credentials_option ')'
  | KW_CHANNEL_ARGS '(' loki_dest_channel_args ')'
  | KW_HEADERS '(' loki_dest_headers ')'
  | threaded_dest_driver_general_option
  | threaded_dest_driver_workers_option
  | threaded_dest_driver_batch_option
  | { last_template_options = loki_dd_get_template_options(last_driver); } template_option
  ;

loki_labels
  : loki_label loki_labels
  |
  ;

loki_label
  : string LL_ARROW template_content
    {
	    loki_dd_add_label(last_driver, $1, $3);
      free($1);
      log_template_unref($3);
    }
  ;

loki_keepalive_options
  : loki_keepalive_option loki_keepalive_options
  |
  ;

loki_keepalive_option
  : KW_TIME '(' nonnegative_integer ')' { grpc_dd_set_keepalive_time(last_driver, $3); }
  | KW_TIMEOUT '(' nonnegative_integer ')' { grpc_dd_set_keepalive_timeout(last_driver, $3); }
  | KW_MAX_PINGS_WITHOUT_DATA '(' nonnegative_integer ')' { grpc_dd_set_keepalive_max_pings(last_driver, $3); }
  ;

loki_dest_channel_args
  : loki_dest_channel_arg loki_dest_channel_args
  |
  ;

loki_dest_channel_arg
  : string LL_ARROW LL_NUMBER { grpc_dd_add_int_channel_arg(last_driver, $1, $3); free($1); }
  | string LL_ARROW string { grpc_dd_add_string_channel_arg(last_driver, $1, $3); free($1); free($3); }
  ;

loki_dest_headers
  : loki_dest_header loki_dest_headers
  |
  ;

loki_dest_header
  : string LL_ARROW string { grpc_dd_add_header(last_driver, $1, $3); free($1); free($3); }
  ;


/*
 * gRPC Credentials Builders
 *
 * TODO: These should be in a separate file, which can be included to other gRPC based drivers' grammar.
 */

grpc_client_credentials_option
  : KW_INSECURE { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_INSECURE); } '(' ')'
  | KW_TLS { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_TLS); } '(' grpc_client_credentials_builder_tls_options ')'
  | KW_ALTS { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_ALTS); } '(' grpc_client_credentials_builder_alts_options ')'
  | KW_ADC { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_ADC); } '(' ')'
  ;

grpc_client_credentials_builder_tls_options
  : grpc_client_credentials_builder_tls_option grpc_client_credentials_builder_tls_options
  |
  ;

grpc_client_credentials_builder_tls_option
  : KW_KEY_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_client_credentials_builder_set_tls_key_path(last_grpc_client_credentials_builder, $3), @1, "Failed to set key-file()");
        free($3);
      }
  | KW_CERT_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_client_credentials_builder_set_tls_cert_path(last_grpc_client_credentials_builder, $3), @1, "Failed to set cert-file()");
        free($3);
      }
  | KW_CA_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_client_credentials_builder_set_tls_ca_path(last_grpc_client_credentials_builder, $3), @1, "Failed to set ca-file()");
        free($3);
      }
  ;

grpc_client_credentials_builder_alts_options
  : grpc_client_credentials_builder_alts_option grpc_client_credentials_builder_alts_options
  |
  ;

grpc_client_credentials_builder_alts_option
  : KW_TARGET_SERVICE_ACCOUNTS '(' grpc_client_credentials_builder_alts_target_service_accounts ')'
  ;

grpc_client_credentials_builder_alts_target_service_accounts
  : string
      {
        grpc_client_credentials_builder_add_alts_target_service_account(last_grpc_client_credentials_builder, $1);
        free($1);
      }
    grpc_client_credentials_builder_alts_target_service_accounts
  |
  ;

/* INCLUDE_RULES */

%%
