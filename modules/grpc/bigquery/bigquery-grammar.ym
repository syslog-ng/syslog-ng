/*
 * Copyright (c) 2024 Axoflow
 * Copyright (c) 2024 Attila Szakacs <attila.szakacs@axoflow.com>
 * Copyright (c) 2023 László Várady
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "bigquery-parser.h"

}


%code {

#include "cfg-grammar-internal.h"
#include "plugin.h"
#include "syslog-names.h"

#include "bigquery-dest.h"
#include "grpc-dest.h"

#include <stdlib.h>

}

%define api.prefix {bigquery_}

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_BIGQUERY
%token KW_URL
%token KW_PROJECT
%token KW_DATASET
%token KW_TABLE
%token KW_SCHEMA
%token KW_PROTOBUF_SCHEMA
%token KW_BATCH_BYTES
%token KW_COMPRESSION

%token KW_KEEP_ALIVE
%token KW_TIME
%token KW_TIMEOUT
%token KW_MAX_PINGS_WITHOUT_DATA

%token KW_CHANNEL_ARGS
%token KW_HEADERS

%type <ptr> bigquery_dest

%%

start
  : LL_CONTEXT_DESTINATION bigquery_dest { YYACCEPT; }
  ;

bigquery_dest
  : KW_BIGQUERY
    {
      last_driver = *instance = bigquery_dd_new(configuration);
    }
    '(' _inner_dest_context_push bigquery_dest_options _inner_dest_context_pop ')' { $$ = last_driver; }
  ;

bigquery_dest_options
  : bigquery_dest_option bigquery_dest_options
  |
  ;

bigquery_dest_option
  : KW_URL '(' string ')' { grpc_dd_set_url(last_driver, $3); free($3); }
  | KW_PROJECT '(' string ')' { bigquery_dd_set_project(last_driver, $3); free($3); }
  | KW_DATASET '(' string ')' { bigquery_dd_set_dataset(last_driver, $3); free($3); }
  | KW_TABLE '(' string ')' { bigquery_dd_set_table(last_driver, $3); free($3); }
  | KW_SCHEMA '(' bigquery_schema_fields ')'
  | KW_PROTOBUF_SCHEMA '(' path_check LL_ARROW template_content_list ')'
    {
      bigquery_dd_set_protobuf_schema(last_driver, $3, $5);
      free($3);
    }
  | KW_BATCH_BYTES '(' positive_integer ')'
    {
      CHECK_ERROR($3 <= (10 * 1000 * 1000), @3, "batch-bytes() cannot be larger than 10 MB. For more info see https://cloud.google.com/bigquery/quotas#write-api-limits");
      grpc_dd_set_batch_bytes(last_driver, $3);
    }
  | KW_COMPRESSION '(' yesno ')'
    {
      grpc_dd_set_compression(last_driver, $3);
    }
  | KW_KEEP_ALIVE '(' bigquery_keepalive_options ')'
  | KW_CHANNEL_ARGS '(' bigquery_dest_channel_args ')'
  | KW_HEADERS '(' bigquery_dest_headers ')'
  | threaded_dest_driver_general_option
  | threaded_dest_driver_workers_option
  | threaded_dest_driver_batch_option
  | { last_template_options = bigquery_dd_get_template_options(last_driver); } template_option
  ;

bigquery_schema_fields
  : bigquery_schema_field bigquery_schema_fields
  |
  ;

bigquery_schema_field
  : string optional_string LL_ARROW template_content
    {
	    CHECK_ERROR(bigquery_dd_add_field(last_driver, $1, $2, $4), @2, "Error adding schema() field, invalid type");
      free($1);
      free($2);
      log_template_unref($4);
    }
  ;

bigquery_keepalive_options
  : bigquery_keepalive_option bigquery_keepalive_options
  |
  ;

bigquery_keepalive_option
  : KW_TIME '(' nonnegative_integer ')' { grpc_dd_set_keepalive_time(last_driver, $3); }
  | KW_TIMEOUT '(' nonnegative_integer ')' { grpc_dd_set_keepalive_timeout(last_driver, $3); }
  | KW_MAX_PINGS_WITHOUT_DATA '(' nonnegative_integer ')' { grpc_dd_set_keepalive_max_pings(last_driver, $3); }
  ;

bigquery_dest_channel_args
  : bigquery_dest_channel_arg bigquery_dest_channel_args
  |
  ;

bigquery_dest_channel_arg
  : string LL_ARROW LL_NUMBER { grpc_dd_add_int_channel_arg(last_driver, $1, $3); free($1); }
  | string LL_ARROW string { grpc_dd_add_string_channel_arg(last_driver, $1, $3); free($1); free($3); }
  ;

bigquery_dest_headers
  : bigquery_dest_header bigquery_dest_headers
  |
  ;

bigquery_dest_header
  : string LL_ARROW string { grpc_dd_add_header(last_driver, $1, $3); free($1); free($3); }
  ;

/* INCLUDE_RULES */

%%
