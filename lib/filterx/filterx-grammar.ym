/*
 * Copyright (c) 2023 Balazs Scheidler <balazs.scheidler@axoflow.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code requires {

#include "filterx/filterx-parser.h"

}

%code {

/* filterx language constructs */
#include "filterx/expr-literal.h"
#include "filterx/object-primitive.h"
#include "filterx/object-null.h"

}

%define api.prefix {filterx_}
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {GList **result}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_TRUE, KW_FALSE
%token KW_NULL

%type <ptr> stmts
%type <node> stmt
%type <node> expr
%type <node> expr_value
%type <node> literal
%type <num> boolean

%%

start
        : stmts					{ *result = $1; if (yychar != FILTERX_EMPTY) { cfg_lexer_unput_token(lexer, &yylval); } YYACCEPT; }
	;

stmts
	: stmt stmts				{ $$ = g_list_prepend($2, $1); }
	|					{ $$ = NULL; }
	;

stmt
	: expr ';'				{ $$ = $1; }

expr
	: expr_value				{ $$ = $1; }
	| '(' expr ')'				{ $$ = $2; }
	;

expr_value
	: literal
	;

literal
	: LL_NUMBER				{ $$ = filterx_literal_new(filterx_integer_new($1)); }
	| LL_FLOAT				{ $$ = filterx_literal_new(filterx_double_new($1)); }
	| KW_NULL				{ $$ = filterx_literal_new(filterx_null_new()); }
	| boolean				{ $$ = filterx_literal_new(filterx_boolean_new($1)); }
	;

boolean
	: KW_TRUE				{ $$ = 1; }
	| KW_FALSE				{ $$ = 0; }
	;

/* INCLUDE_RULES */

%%
