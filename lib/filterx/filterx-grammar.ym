/*
 * Copyright (c) 2023 Balazs Scheidler <balazs.scheidler@axoflow.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code requires {

#include "filterx/filterx-parser.h"

}

%code {

/* filterx language constructs */
#include "filterx/expr-literal.h"
#include "filterx/expr-message-ref.h"
#include "filterx/expr-template.h"
#include "filterx/expr-boolalg.h"
#include "filterx/expr-assign.h"
#include "filterx/expr-getattr.h"
#include "filterx/expr-setattr.h"
#include "filterx/expr-json.h"
#include "filterx/expr-comparison.h"
#include "filterx/object-primitive.h"
#include "filterx/object-json.h"
#include "filterx/object-null.h"
#include "filterx/object-string.h"

#include "template/templates.h"

FilterXExpr *
construct_template_expr(LogTemplate *template)
{
  FilterXExpr *result;

  if (log_template_is_literal_string(template))
    result = filterx_literal_new(filterx_string_new(log_template_get_literal_value(template, NULL), -1));
  else if (log_template_is_trivial(template))
    result = filterx_message_ref_resolver_new(log_template_get_trivial_value_handle(template));
  else
    result = filterx_template_new(log_template_ref(template));
  log_template_unref(template);
  return result;
}

}

%define api.prefix {filterx_}
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {GList **result}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_TRUE, KW_FALSE
%token KW_NULL

%type <ptr> stmts
%type <node> stmt
%type <node> expr
%type <node> expr_value
%type <node> literal
%type <ptr> literal_object
%type <node> lvalue
%type <ptr> template
%type <ptr> json_object
%type <ptr> json_object_values
%type <ptr> json_object_value
%type <num> boolean

%%

start
        : stmts					{ *result = $1; if (yychar != FILTERX_EMPTY) { cfg_lexer_unput_token(lexer, &yylval); } YYACCEPT; }
	;

stmts
	: stmt stmts				{ $$ = g_list_prepend($2, $1); }
	|					{ $$ = NULL; }
	;

stmt
	: expr ';'				{ $$ = $1; }

expr
	: expr_value				{ $$ = $1; }
	| lvalue KW_ASSIGN expr			{ $$ = filterx_assign_new($1, $3); }
	| KW_NOT expr				{ $$ = filterx_unary_not_new($2); }
	| expr KW_OR expr			{ $$ = filterx_binary_or_new($1, $3); }
	| expr KW_AND expr                      { $$ = filterx_binary_and_new($1, $3); }
	| expr '.' LL_IDENTIFIER		{ $$ = filterx_getattr_new($1, $3); free($3); }
	| expr '.' LL_IDENTIFIER KW_ASSIGN expr	{ $$ = filterx_setattr_new($1, $3, $5); free($3); }
        | expr KW_TA_LT expr		        { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_LT); }
        | expr KW_TA_LE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_LT | FCMPX_EQ); }
        | expr KW_TA_EQ expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_EQ); }
        | expr KW_TA_NE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_LT | FCMPX_GT); }
        | expr KW_TA_GE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_EQ | FCMPX_GT); }
        | expr KW_TA_GT expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_GT); }
        | expr KW_STR_LT expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_LT); }
        | expr KW_STR_LE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_LT | FCMPX_EQ); }
        | expr KW_STR_EQ expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_EQ); }
        | expr KW_STR_NE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_LT | FCMPX_GT); }
        | expr KW_STR_GE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_EQ | FCMPX_GT); }
        | expr KW_STR_GT expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_GT); }
        | expr KW_TAV_EQ expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AND_VALUE_BASED | FCMPX_EQ); }
        | expr KW_TAV_NE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AND_VALUE_BASED | FCMPX_LT | FCMPX_GT); }
	| '(' expr ')'				{ $$ = $2; }
	;

expr_value
	: literal
	| lvalue				{ $$ = $1; }
	| template				{ $$ = construct_template_expr($1); }
	| json_object                           { $$ = filterx_json_expr_new($1); }
	;

literal: literal_object				{ $$ = filterx_literal_new($1); }

literal_object
	: LL_NUMBER				{ $$ = filterx_integer_new($1); }
	| LL_FLOAT				{ $$ = filterx_double_new($1); }
	| KW_NULL				{ $$ = filterx_null_new(); }
	| boolean				{ $$ = filterx_boolean_new($1); }
	;

lvalue: '$' LL_IDENTIFIER			{ $$ = filterx_message_ref_expr_new(log_msg_get_value_handle($2)); free($2); }


boolean
	: KW_TRUE				{ $$ = 1; }
	| KW_FALSE				{ $$ = 0; }
	;

template
	: LL_STRING
          {
            GError *error = NULL;
	    LogTemplate *template = log_template_new(configuration, NULL);

            CHECK_ERROR_GERROR(log_template_compile(template, $1, &error), @1, error, "Error compiling template");
            free($1);

            $$ = template;
          }
	;

json_object
	: '{' json_object_values '}'            { $$ = $2; }
	;

json_object_values
	: json_object_value ',' json_object_values      { $$ = g_list_prepend($3, $1); }
	|						{ $$ = NULL; }
	;

json_object_value
	: LL_STRING ':' expr				{ $$ = filterx_json_kv_new($1, $3); free($1); }
	;

/* INCLUDE_RULES */

%%
