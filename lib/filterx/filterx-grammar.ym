/*
 * Copyright (c) 2023 Balazs Scheidler <balazs.scheidler@axoflow.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code requires {

#include "filterx/filterx-parser.h"

}

%code {

/* filterx language constructs */
#include "filterx/expr-literal.h"
#include "filterx/expr-variable.h"
#include "filterx/expr-template.h"
#include "filterx/expr-boolalg.h"
#include "filterx/expr-assign.h"
#include "filterx/expr-getattr.h"
#include "filterx/expr-setattr.h"
#include "filterx/expr-get-subscript.h"
#include "filterx/expr-set-subscript.h"
#include "filterx/expr-comparison.h"
#include "filterx/object-primitive.h"
#include "filterx/object-json.h"
#include "filterx/object-null.h"
#include "filterx/object-string.h"
#include "filterx/filterx-config.h"
#include "filterx/expr-function.h"
#include "filterx/expr-condition.h"
#include "filterx/expr-isset.h"
#include "filterx/expr-unset.h"
#include "filterx/expr-literal-generator.h"
#include "filterx/expr-shorthand.h"
#include "filterx/expr-regexp.h"

#include "template/templates.h"

FilterXExpr *last_literal_generator;

FilterXExpr *
construct_template_expr(LogTemplate *template)
{
  FilterXExpr *result;

  if (log_template_is_literal_string(template))
    result = filterx_literal_new(
		filterx_config_freeze_object(configuration,
			filterx_string_new(log_template_get_literal_value(template, NULL), -1)));
  else if (log_template_is_trivial(template))
    result = filterx_msg_variable_expr_new(
                log_msg_get_value_name(log_template_get_trivial_value_handle(template), NULL));
  else
    result = filterx_template_new(log_template_ref(template));
  log_template_unref(template);
  return result;
}

}

%define api.prefix {filterx_}
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {GList **result}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_TRUE, KW_FALSE
%token KW_NULL
%token KW_ENUM
%token KW_ISSET
%token KW_UNSET
%token KW_DECLARE
%token KW_REGEXP_SEARCH

%type <ptr> stmts
%type <node> stmt
%type <node> stmt_expr
%type <node> assignment
%type <node> generator_assignment
%type <node> generator_casted_assignment
%type <node> declaration
%type <node> expr
%type <node> expr_value
%type <node> expr_generator
%type <node> function_call
%type <ptr> arguments
%type <ptr> argument
%type <node> literal
%type <ptr> literal_object
%type <node> lvalue
%type <node> lvalue_floating
%type <ptr> template
%type <ptr> dict_generator
%type <ptr> inner_dict_generator
%type <ptr> dict_element
%type <ptr> dict_elements
%type <ptr> list_generator
%type <ptr> inner_list_generator
%type <ptr> list_element
%type <ptr> list_elements
%type <ptr> regexp_search
%type <ptr> regexp_match
%type <num> boolean
%type <ptr> conditional
%type <ptr> condition
%type <ptr> if
%type <ptr> codeblock
%type <ptr> ternary

%%

start
        : stmts					{ *result = $1; if (yychar != FILTERX_EMPTY) { cfg_lexer_unput_token(lexer, &yylval); } YYACCEPT; }
	;

stmts
	: stmt stmts				{ if ($1) $$ = g_list_prepend($2, $1); else $$ = $2; }
	|					{ $$ = NULL; }
	;


stmt
	: stmt_expr ';'				{
						  CHECK_ERROR($1, @1, "failed to initialize statement");
						  filterx_expr_set_location($1, lexer, &@1);
						  $$ = $1;
						}
	| ';'					{ $$ = NULL; }
	;

stmt_expr
	: expr 					{ $$ = $1; }
	| conditional 				{ $$ = $1; }
	| assignment 				{ $$ = $1; }
	| declaration 				{ $$ = $1; }
	;

assignment
	: lvalue KW_ASSIGN expr			{ $$ = filterx_assign_new($1, $3); }
	| expr '.' LL_IDENTIFIER KW_ASSIGN expr	{ $$ = filterx_setattr_new($1, $3, $5); free($3); }
	| expr '[' expr ']' KW_ASSIGN expr	{ $$ = filterx_set_subscript_new($1, $3, $6); }
	| expr '[' ']' KW_ASSIGN expr  		{ $$ = filterx_set_subscript_new($1, NULL, $5); }
	| generator_assignment
	;

generator_assignment
	: expr '.' LL_IDENTIFIER KW_ASSIGN expr_generator
						{
						  FilterXExpr *setattr = filterx_setattr_new($1, $3, filterx_generator_create_container_new($5, $1));
						  filterx_generator_set_fillable($5, filterx_getattr_new(filterx_expr_ref($1), $3));

						  FilterXExpr *shorthand = filterx_shorthand_new();
						  filterx_shorthand_add(shorthand, setattr);
						  filterx_shorthand_add(shorthand, $5);

						  free($3);
						  $$ = shorthand;
						}
	| expr '[' expr ']' KW_ASSIGN expr_generator
						{
						  FilterXExpr *set_subscript = filterx_set_subscript_new($1, $3, filterx_generator_create_container_new($6, $1));
						  filterx_generator_set_fillable($6, filterx_get_subscript_new(filterx_expr_ref($1), filterx_expr_ref($3)));

						  FilterXExpr *shorthand = filterx_shorthand_new();
						  filterx_shorthand_add(shorthand, set_subscript);
						  filterx_shorthand_add(shorthand, $6);

						  $$ = shorthand;
						}
	| expr '[' ']' KW_ASSIGN expr_generator
						{
						  FilterXExpr *minus_one = filterx_literal_new(filterx_config_freeze_object(configuration, filterx_integer_new(-1)));
						  FilterXExpr *set_subscript = filterx_set_subscript_new($1, NULL, filterx_generator_create_container_new($5, $1));
						  filterx_generator_set_fillable($5, filterx_get_subscript_new(filterx_expr_ref($1), minus_one));

						  FilterXExpr *shorthand = filterx_shorthand_new();
						  filterx_shorthand_add(shorthand, set_subscript);
						  filterx_shorthand_add(shorthand, $5);

						  $$ = shorthand;
						}
	| expr KW_PLUS_ASSIGN expr_generator	{ $$ = $3; filterx_generator_set_fillable($3, $1); }
	| generator_casted_assignment
	;

generator_casted_assignment
	: lvalue KW_ASSIGN LL_IDENTIFIER '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $3, NULL, &error);
						  CHECK_ERROR_GERROR(func, @3, error, "function lookup failed: %s()", $3);

						  FilterXExpr *assign = filterx_assign_new($1, func);
						  filterx_generator_set_fillable($5, filterx_expr_ref($1));

						  FilterXExpr *shorthand = filterx_shorthand_new();
						  filterx_shorthand_add(shorthand, assign);
						  filterx_shorthand_add(shorthand, $5);
						  free($3);

						  $$ = shorthand;
						}
	| expr '.' LL_IDENTIFIER KW_ASSIGN LL_IDENTIFIER '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $5, NULL, &error);
						  CHECK_ERROR_GERROR(func, @5, error, "function lookup failed: %s()", $5);

						  FilterXExpr *setattr = filterx_setattr_new($1, $3, func);
						  filterx_generator_set_fillable($7, filterx_getattr_new(filterx_expr_ref($1), $3));

						  FilterXExpr *shorthand = filterx_shorthand_new();
						  filterx_shorthand_add(shorthand, setattr);
						  filterx_shorthand_add(shorthand, $7);
						  free($3);

						  $$ = shorthand;
						}
	| expr '[' expr ']' KW_ASSIGN LL_IDENTIFIER '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $6, NULL, &error);
						  CHECK_ERROR_GERROR(func, @6, error, "function lookup failed: %s()", $6);

						  FilterXExpr *set_subscript = filterx_set_subscript_new($1, $3, func);
						  filterx_generator_set_fillable($8, filterx_get_subscript_new(filterx_expr_ref($1), filterx_expr_ref($3)));

						  FilterXExpr *shorthand = filterx_shorthand_new();
						  filterx_shorthand_add(shorthand, set_subscript);
						  filterx_shorthand_add(shorthand, $8);
						  free($6);

						  $$ = shorthand;
						}
	| expr '[' ']' KW_ASSIGN LL_IDENTIFIER '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $5, NULL, &error);
						  CHECK_ERROR_GERROR(func, @5, error, "function lookup failed: %s()", $5);

						  FilterXExpr *minus_one = filterx_literal_new(filterx_config_freeze_object(configuration, filterx_integer_new(-1)));
						  FilterXExpr *set_subscript = filterx_set_subscript_new($1, NULL, func);
						  filterx_generator_set_fillable($7, filterx_get_subscript_new(filterx_expr_ref($1), minus_one));

						  FilterXExpr *shorthand = filterx_shorthand_new();
						  filterx_shorthand_add(shorthand, set_subscript);
						  filterx_shorthand_add(shorthand, $7);
						  free($5);

						  $$ = shorthand;
						}
	;

declaration
	: KW_DECLARE lvalue_floating KW_ASSIGN expr	{ filterx_variable_expr_declare($2); $$ = filterx_assign_new($2, $4); }
	;


expr
	: expr_value				{ $$ = $1; }
	| function_call				{ $$ = $1; }
	| KW_NOT expr				{ $$ = filterx_unary_not_new($2); }
	| expr KW_OR expr			{ $$ = filterx_binary_or_new($1, $3); }
	| expr KW_AND expr                      { $$ = filterx_binary_and_new($1, $3); }
	| expr '.' LL_IDENTIFIER		{ $$ = filterx_getattr_new($1, $3); free($3); }
	| expr '[' expr ']'			{ $$ = filterx_get_subscript_new($1, $3); }
        | expr KW_TA_LT expr		        { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_LT); }
        | expr KW_TA_LE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_LT | FCMPX_EQ); }
        | expr KW_TA_EQ expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_EQ); }
        | expr KW_TA_NE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_NE ); }
        | expr KW_TA_GE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_EQ | FCMPX_GT); }
        | expr KW_TA_GT expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_GT); }
        | expr KW_STR_LT expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_LT); }
        | expr KW_STR_LE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_LT | FCMPX_EQ); }
        | expr KW_STR_EQ expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_EQ); }
        | expr KW_STR_NE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_NE ); }
        | expr KW_STR_GE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_EQ | FCMPX_GT); }
        | expr KW_STR_GT expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_GT); }
        | expr KW_TAV_EQ expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AND_VALUE_BASED | FCMPX_EQ); }
        | expr KW_TAV_NE expr			{ $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AND_VALUE_BASED | FCMPX_NE ); }
	| '(' expr ')'				{ $$ = $2; }
	| ternary				{ $$ = $1; }
	| KW_ISSET '(' expr ')'			{ $$ = filterx_isset_new($3); }
	| KW_UNSET '(' expr ')'			{ $$ = filterx_unset_new($3); }
	| regexp_match				{ $$ = $1; }
	;

expr_value
	: literal
	| lvalue				{ $$ = $1; }
	| template				{ $$ = construct_template_expr($1); }
	;

expr_generator
	: dict_generator
	| list_generator
	| regexp_search
	| '(' expr_generator ')'		{ $$ = $2; }
	;

function_call
	: LL_IDENTIFIER '(' arguments ')'	{
						  GError *error = NULL;
						  FilterXExpr *res = filterx_function_lookup(configuration, $1, $3, &error);
						  CHECK_ERROR_GERROR(res, @$, error, "function lookup failed: %s()", $1);
						  free($1);
						  $$ = res;
						}
	;

arguments
	: arguments ',' argument		{ $$ = g_list_append($1, $3); }
	| argument				{ $$ = g_list_append(NULL, $1); }
	|					{ $$ = NULL; }
	;

argument
	: expr					{ $$ = filterx_function_arg_new(NULL, $1); }
	| string KW_ASSIGN expr			{ $$ = filterx_function_arg_new($1, $3); free($1); }
	| KW_NULL KW_ASSIGN expr		{ $$ = filterx_function_arg_new("null", $3); }
	;

literal: literal_object				{ $$ = filterx_literal_new(filterx_config_freeze_object(configuration, $1)); }

literal_object
	: LL_NUMBER				{ $$ = filterx_integer_new($1); }
	| LL_FLOAT				{ $$ = filterx_double_new($1); }
	| KW_NULL				{ $$ = filterx_null_new(); }
	| boolean				{ $$ = filterx_boolean_new($1); }
	| KW_ENUM '(' string '.' string ')'	{
							FilterXObject *res = filterx_enum_new(configuration, $3, $5);
							CHECK_ERROR(res, @1, "enum %s.%s not found", $3, $5);
							free($3);
							free($5);
							$$ = res;
						}
	;

lvalue
	: '$' LL_IDENTIFIER			{ $$ = filterx_msg_variable_expr_new($2); free($2); }
	| LL_MESSAGE_REF			{ $$ = filterx_msg_variable_expr_new($1); free($1); }
	| lvalue_floating
	;

lvalue_floating
	: LL_IDENTIFIER				{ $$ = filterx_floating_variable_expr_new($1); free($1); }
	;

boolean
	: KW_TRUE				{ $$ = 1; }
	| KW_FALSE				{ $$ = 0; }
	;

template
	: LL_STRING
          {
            GError *error = NULL;
	    LogTemplate *template = log_template_new(configuration, NULL);

            CHECK_ERROR_GERROR(log_template_compile(template, $1, &error), @1, error, "Error compiling template");
            free($1);

            $$ = template;
          }
	;

dict_generator
	: '{' { last_literal_generator = filterx_literal_dict_generator_new(); } dict_elements '}'
						{ filterx_literal_generator_set_elements(last_literal_generator, $3); $$ = last_literal_generator; }
	;

inner_dict_generator
	: '{' dict_elements '}'			{ $$ = filterx_literal_inner_dict_generator_new(last_literal_generator, $2); }
	;

dict_elements
	: dict_element ',' dict_elements	{ $$ = g_list_prepend($3, $1); }
	| dict_element				{ $$ = g_list_append(NULL, $1); }
	|					{ $$ = NULL; }
	;

dict_element
	: expr ':' expr				{ $$ = filterx_literal_generator_elem_new($1, $3, TRUE); }
	| expr ':' inner_dict_generator		{ $$ = filterx_literal_generator_elem_new($1, $3, FALSE); }
	| expr ':' inner_list_generator		{ $$ = filterx_literal_generator_elem_new($1, $3, FALSE); }
	;

list_generator
	: '[' { last_literal_generator = filterx_literal_list_generator_new(); } list_elements ']'
						{ filterx_literal_generator_set_elements(last_literal_generator, $3); $$ = last_literal_generator; }
	;

inner_list_generator
	: '[' list_elements ']'			{ $$ = filterx_literal_inner_list_generator_new(last_literal_generator, $2); }
	;

list_elements
	: list_element ',' list_elements	{ $$ = g_list_prepend($3, $1); }
	| list_element				{ $$ = g_list_append(NULL, $1); }
	|					{ $$ = NULL; }
	;

list_element
	: expr					{ $$ = filterx_literal_generator_elem_new(NULL, $1, TRUE); }
	| inner_dict_generator			{ $$ = filterx_literal_generator_elem_new(NULL, $1, FALSE); }
	| inner_list_generator			{ $$ = filterx_literal_generator_elem_new(NULL, $1, FALSE); }
	;

regexp_search
	: KW_REGEXP_SEARCH '(' expr ',' string ')'	{ $$ = filterx_expr_regexp_search_generator_new($3, $5); free($5); }
	;

regexp_match
	: expr KW_REGEXP_MATCH string		{ $$ = filterx_expr_regexp_match_new($1, $3); free($3); }
	;

conditional
	: if					{ $$ = $1; }
	| if KW_ELSE codeblock
	  {
	    $$ = filterx_conditional_add_false_branch((FilterXConditional*)$1, (FilterXConditional*)filterx_conditional_new_codeblock($3));
	  }
	;

if
	: KW_IF '(' expr ')' codeblock
	  {
	    $$ = filterx_conditional_new_conditional_codeblock($3, $5);
	  }
	| if KW_ELIF '(' expr ')' codeblock
	  {
	    $$ = filterx_conditional_add_false_branch((FilterXConditional*)$1, (FilterXConditional*)filterx_conditional_new_conditional_codeblock($4, $6));
	  }
	;


codeblock
	: '{' stmts '}'				{ $$ = $2; }
	;

ternary
	: expr '?' expr ':' expr
	  {
	    FilterXConditional *cond = (FilterXConditional*)filterx_conditional_new_conditional_codeblock($1, g_list_append(NULL, $3));
	    $$ = filterx_conditional_add_false_branch(cond, (FilterXConditional*)filterx_conditional_new_codeblock(g_list_append(NULL, $5)));
	  }
	| expr '?' ':' expr
	  {
	    FilterXConditional *cond = (FilterXConditional*)filterx_conditional_new_conditional_codeblock($1, NULL);
	    $$ = filterx_conditional_add_false_branch(cond, (FilterXConditional*)filterx_conditional_new_codeblock(g_list_append(NULL, $4)));
	  }
	;

/* INCLUDE_RULES */

%%
